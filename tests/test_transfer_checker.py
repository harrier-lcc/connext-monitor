from datetime import datetime, timedelta
from connext_monitor.config import AlertConfig
from connext_monitor.transfer_checker import TransferChecker
import queue
from hexbytes import HexBytes

input = queue.Queue()
output = queue.Queue()

def create_mock_tracker():
    global input, output
    alert_config = AlertConfig(
        execution_max_time=timedelta(minutes=5),
        reconcile_max_time=timedelta(minutes=5),
        domains=[6648936, 1886350457, 1634886255]
    )
    return TransferChecker(1, input, alert_config, output)

def test_process_xcalled():
    tracker = create_mock_tracker()
    test_event = {'address': '0x8898B472C54c31894e3B9bb83cEA802a5d0e63C6', 'blockHash': HexBytes('0xf9941bad9034d3223cd3d51adc9fd5494526488e5129b6c108d93552888c1ff5'), 'blockNumber': 20478063, 'data': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000a797cbcae000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000657468000000000000000000000000000000000000000000000000000000006172626f0000000000000000000000000000000000000000000000000000000000657468000000000000000000000000797a63cf969529e9083aea6239b7014988c6a5dc000000000000000000000000797a63cf969529e9083aea6239b7014988c6a5dc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000640000000000000000000000003a23f943181408eac424116af7b7790c94cb97a50000000000000000000000000000000000000000000000000000000a797cbcae000000000000000000000000000000000000000000000986cc673eed7ff0e000000000000000000000000000000000000000000000000000000000000000eb36000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b1006574680000000000000000000000008898b472c54c31894e3b9bb83cea802a5d0e63c6000018d16172626f000000000000000000000000ee9dec2712cce65174b561151701bf54b99c24c800657468000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48030000000000000000000000000000000000000000000000000000000a797cbcaefb56f2b365c105a8b28d72c87ef8c3d83c15cef788854c1bf9dea0402689cd45000000000000000000000000000000'), 'logIndex': 255, 'removed': False, 'topics': [HexBytes('0xed8e6ba697dd65259e5ce532ac08ff06d1a3607bcec58f8f0937fe36a5666c54'), HexBytes('0xfb56f2b365c105a8b28d72c87ef8c3d83c15cef788854c1bf9dea0402689cd45'), HexBytes('0x000000000000000000000000000000000000000000000000000000000000eb36'), HexBytes('0x507d791b6fba48ab58ca3da17659f9d5012ea841157ebfd59e040662233935b5')], 'transactionHash': HexBytes('0xf997e45af894d5c447287f5c663362bc43fad5aec2095e1d546baf375a68e223'), 'transactionIndex': 128}
    block_timestamp = int(datetime(2024, 1, 1, 0, 0).timestamp())
    tracker.process_xcalled(1, test_event, block_timestamp)
    assert output.empty() == False
    cmd1 = output.get()
    assert len(cmd1) == 4
    (cmd, id, alert_time, msg) = cmd1
    assert cmd == "add"
    assert id == "fb56f2b365c105a8b28d72c87ef8c3d83c15cef788854c1bf9dea0402689cd45_execution"
    assert alert_time == datetime(2024, 1, 1, 0, 5)
    assert output.empty() == False
    cmd2 = output.get()
    (cmd, id, alert_time, msg) = cmd2
    assert cmd == "add"
    assert id == "fb56f2b365c105a8b28d72c87ef8c3d83c15cef788854c1bf9dea0402689cd45_reconcile"
    assert alert_time == datetime(2024, 1, 1, 0, 5)
    assert output.empty() == True

def test_process_executed():
    tracker = create_mock_tracker()
    test_event = {'address': '0x8898B472C54c31894e3B9bb83cEA802a5d0e63C6', 'blockHash': HexBytes('0xc72655249a81004327183684f8e6d6373a78b23ea1271b4d472f573010d711ce'), 'blockNumber': 20477454, 'data': HexBytes('0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000fb64aa41db230355000000000000000000000000f9d64d54d32ee2bdceaabfa60c4c438e224427d000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000004ffa5968857a6c8242e4a6ded2418155d33e82e70000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000006c696e6d00000000000000000000000000000000000000000000000000000000006574680000000000000000000000000000000000000000000000000000000000657468000000000000000000000000c1036d6bba2fe24c65823110b348ee80d3386acd00000000000000000000000019b2b661af0673ae4d2bc3ee22a5f09ead909d38000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004d7572040b84b41a6aa2efe4a93efff182388f88000000000000000000000000000000000000000000000000fb84dc08010678e6000000000000000000000000000000000000000000000000fb84dc08010678e6000000000000000000000000000000000000000000000000000000000000db7e000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000fb84dc08010678e6000000000000000000000000000000000000000000000000000000000000000100000000000000000000000097b9dcb1aa34fe5f12b728d9166ae353d1e7f5c40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000412615bff10d470e0f682673df1c1690052af41b677ee8ca5db3c4a597ce0ea9394a820eb1c76a7caa0e95b16e72343ba85ede55509ccd9893d626f128d044df641c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000419b972c0f91a5596df0c60768ac7392959020def06fa7f2c3fb47fdf16e30a9676b2bc3bde0a4d1cba623dbab063380e3eceab56d81aecd9d7ab2907b8378e87f1c00000000000000000000000000000000000000000000000000000000000000'), 'logIndex': 64, 'removed': False, 'topics': [HexBytes('0x0b07a8b0b083f8976b3c832b720632f49cb8ba1e7a99e1b145f51a47d3391cb7'), HexBytes('0x37607880866f24fb89c9de0fd0ffdc10b7be019188173c94d50dce92aec59913'), HexBytes('0x000000000000000000000000c1036d6bba2fe24c65823110b348ee80d3386acd'), HexBytes('0x000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2')], 'transactionHash': HexBytes('0x7d191b5e8b10c64e0a9ffc19729847e88648e4400718f0222cd6eb6cb68741bb'), 'transactionIndex': 7}
    block_timestamp = int(datetime(2024, 1, 1, 0, 0).timestamp())
    tracker.process_executed(1, test_event, block_timestamp)
    assert output.empty() == False
    cmd1 = output.get()
    assert len(cmd1) == 2
    (cmd, id) = cmd1
    assert cmd == "remove"
    assert id == "37607880866f24fb89c9de0fd0ffdc10b7be019188173c94d50dce92aec59913_execution"
    assert output.empty() == True

def test_process_reconciled():
    tracker = create_mock_tracker()
    test_event = {'address': '0x8898B472C54c31894e3B9bb83cEA802a5d0e63C6', 'blockHash': HexBytes('0xe15ce8fe40f5bef92183febcd3706ea9ff562e4c5f00ca8b50b4a1f3429bcd9d'), 'blockNumber': 20477537, 'data': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000057fd6fa9ae6fb300000000000000000000000002fdf04af077687cda03bd3162388b7972a4a1cc00000000000000000000000000000000000000000000000000000000000000010000000000000000000000006fd84ba95525c4ccd218f2f16f646a08b4b0a598'), 'logIndex': 167, 'removed': False, 'topics': [HexBytes('0x30bf44531c04b96173a40012c90db840a147cf7d50a3e160f5227f1af2faa3a0'), HexBytes('0x83d4ea4dbbdc8cfb40d247eff19fddfda3e759ea0e0f71d0257f44931033ee94'), HexBytes('0x000000000000000000000000000000000000000000000000000000006261736d'), HexBytes('0x000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2')], 'transactionHash': HexBytes('0xa9f2ed0228ba1759fc02df626eb8945d098b6e430a0f9c6263209addabce126f'), 'transactionIndex': 42}
    block_timestamp = int(datetime(2024, 1, 1, 0, 0).timestamp())
    tracker.process_reconciled(1, test_event, block_timestamp)
    assert output.empty() == False
    cmd1 = output.get()
    assert len(cmd1) == 2
    (cmd, id) = cmd1
    assert cmd == "remove"
    assert id == "83d4ea4dbbdc8cfb40d247eff19fddfda3e759ea0e0f71d0257f44931033ee94_reconcile"
    assert output.empty() == True
